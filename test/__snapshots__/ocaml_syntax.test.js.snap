// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ocaml 0 snapshot 1`] = `
[
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 0,
          "line": 1,
        },
        {
          "col": 31,
          "line": 1,
        },
      ],
      "stderr": "",
      "stdout": "awesome
",
      "value": "- : unit = ()
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 2,
        },
        {
          "col": 13,
          "line": 4,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "type say = Hello | Goodbye
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 5,
        },
        {
          "col": 60,
          "line": 5,
        },
      ],
      "stderr": "Line 5, characters 53-54:
Warning 11 [redundant-case]: this match case is unused.
",
      "stdout": "",
      "value": "
- : say -> unit = <fun>
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 6,
        },
        {
          "col": 11,
          "line": 6,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
val a : int = 1
",
    },
  },
]
`;

exports[`ocaml 1 snapshot 1`] = `
[
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 0,
          "line": 1,
        },
        {
          "col": 30,
          "line": 1,
        },
      ],
      "stderr": "",
      "stdout": "Another stdout
",
      "value": "
- : unit = ()
",
    },
  },
]
`;

exports[`ocaml 2 snapshot 1`] = `
[
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 0,
          "line": 1,
        },
        {
          "col": 13,
          "line": 1,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
val a : int ref = {contents = 1}
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 2,
        },
        {
          "col": 24,
          "line": 2,
        },
      ],
      "stderr": "",
      "stdout": "1",
      "value": "
- : unit = ()
",
    },
  },
]
`;

exports[`ocaml 3 snapshot 1`] = `
[
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 0,
          "line": 1,
        },
        {
          "col": 68,
          "line": 2,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
val factorial : int -> int = <fun>
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 3,
        },
        {
          "col": 21,
          "line": 3,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
- : int = 720
",
    },
  },
]
`;

exports[`ocaml 4 snapshot 1`] = `
[
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 0,
          "line": 1,
        },
        {
          "col": 27,
          "line": 3,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
type tree = Leaf | Node of int * tree * tree
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 4,
        },
        {
          "col": 66,
          "line": 7,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
val sum : tree -> int = <fun>
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 9,
        },
        {
          "col": 5,
          "line": 14,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
val myTree : tree =
  Node (1, Node (2, Node (4, Leaf, Leaf), Node (6, Leaf, Leaf)),
   Node (3, Node (5, Leaf, Leaf), Node (7, Leaf, Leaf)))
",
    },
  },
  {
    "kind": "Ok",
    "value": {
      "loc": [
        {
          "col": 2,
          "line": 15,
        },
        {
          "col": 20,
          "line": 15,
        },
      ],
      "stderr": "",
      "stdout": "",
      "value": "
- : int = 28
",
    },
  },
]
`;
